{
    "lang": "fr",
    "post_title": "[:en]PowerShell Philosophy. Part 2: Pipeline, Variables, Get-Member, *.ps1 Files, and Exporting Results[:]",
    "post_content": "<!-- wp:heading {\"level\":2} -->\n<h2 class=\"wp-block-heading\">PowerShell Philosophy. Part 2: Pipeline, Variables, Get-Member, *.ps1 Files, and Exporting Results</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>❗ Important:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I am writing about <span dir=\"ltr\">PS7 (PowerShell 7)</span>. It differs from <span dir=\"ltr\">PS5 (PowerShell 5)</span>. Starting with the seventh version, <span dir=\"ltr\">PS</span> became cross-platform. Because of this, the behavior of some commands changed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the <a href=\"#part-1\">first part</a>, we established a key principle: PowerShell works with <strong>objects</strong>, not text. This post is dedicated to some important PowerShell tools: we will learn how to pass objects through the <strong>pipeline</strong>, analyze them using <strong><code>Get-Member</code></strong>, save results in <strong>variables</strong>, and automate all of this in <strong>script files (<code>.ps1</code>)</strong> with <strong>exporting</strong> results to convenient formats.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1. What is the Pipeline (<code>|</code>)?</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The pipeline in PowerShell is a mechanism for passing full-fledged <span dir=\"ltr\">.NET</span> objects (not just text) from one command to another, where each subsequent cmdlet receives structured objects with all their properties and methods.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The symbol <code>|</code> (vertical bar) is the pipeline operator. Its task is to take the result (output) of the command to its left and pass it as input to the command to its right.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Command 1 (creates objects)</code> → <code>|</code> → <code>Command 2 (receives and processes objects)</code> → <code>|</code> → <code>Command 3 (receives processed objects)</code> → <code>|</code> ...</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Classic UNIX Pipeline: Text Stream</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In <code>bash</code>, a <strong>stream of bytes</strong> is passed through the pipeline, which is usually interpreted as text.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-bash\"># Find all 'nginx' processes and count them\nps -ef | grep 'nginx' | wc -l\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here <code>ps</code> outputs text, <code>grep</code> filters this text, and <code>wc</code> counts lines. Each utility knows nothing about \"processes\"; it only works with strings.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">PowerShell Pipeline: Object Stream</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:</strong> Let's get all processes, sort them by <span dir=\"ltr\">CPU</span> usage, and select the 5 most \"resource-intensive\" ones.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 5\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/1.png\" alt=\"Screenshot showing PowerShell output of top 5 CPU-intensive processes\"/><figcaption>PowerShell output of top 5 CPU-intensive processes.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Here <code>Get-Process</code> creates process <strong>objects</strong>. <code>Sort-Object</code> receives these <strong>objects</strong> and sorts them by the <code>CPU</code> property. <code>Select-Object</code> receives the sorted <strong>objects</strong> and selects the first 5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You've probably noticed words in the command starting with a hyphen (<span dir=\"ltr\">-</span>): <span dir=\"ltr\">-Property</span>, <span dir=\"ltr\">-Descending</span>, <span dir=\"ltr\">-First</span>. These are parameters.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Parameters are settings, switches, and instructions for a cmdlet. They allow you to control <strong>HOW</strong> a command will perform its work. Without parameters, the command operates in its default mode, but with parameters, you give it specific instructions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Main types of parameters:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Parameter with a value: requires additional information.\n<ul><!-- wp:list-item -->\n<li><code>-Property CPU</code>: We tell <code>Sort-Object</code> which property to sort by. <code>CPU</code> is the parameter's value.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><code>-First 5</code>: We tell <code>Select-Object</code> how many objects to select. <code>5</code> is the parameter's value.</li>\n<!-- /wp:list-item --></ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Switch parameter (flag): Does not require a value. Its mere presence in the command enables or disables certain behavior.\n<ul><!-- wp:list-item -->\n<li><code>-Descending</code>: This flag tells <code>Sort-Object</code> to reverse the sort order (from largest to smallest). It doesn't need an additional value—it's an instruction in itself.</li>\n<!-- /wp:list-item --></ul>\n</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name 'svchost' | Measure-Object\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/2.png\" alt=\"Screenshot showing PowerShell output of Measure-Object for svchost processes\"/><figcaption>PowerShell output of Measure-Object for svchost processes.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>This command answers a very simple question:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"How many processes with the name <code>svchost.exe</code> are currently running on my system?\"</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Step-by-step breakdown</h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\"><strong>Step 1: <code>Get-Process -Name 'svchost'</code></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This part of the command queries the operating system and asks it to find <strong>all</strong> running processes whose executable file name is <code>svchost.exe</code>. Unlike processes like <code>notepad</code> (of which there are usually one or two), there are always <strong>many</strong> <code>svchost</code> processes in the system. The command will return an <strong>array (collection) of objects</strong>, where each object is a separate, full-fledged <code>svchost</code> process with its unique <span dir=\"ltr\">ID</span>, memory usage, etc. PowerShell found, for example, 90 <code>svchost</code> processes in the system and now holds a collection of 90 objects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\"><strong>Step 2: <code>|</code> (Pipeline Operator)</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This symbol takes the collection of 90 <code>svchost</code> objects obtained in the first step and begins passing them <strong>one by one</strong> as input to the next command.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\"><strong>Step 3: <code>Measure-Object</code></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since we called <code>Measure-Object</code> without parameters (such as <span dir=\"ltr\">-Property</span>, <span dir=\"ltr\">-Sum</span>, etc.), it performs its <strong>default</strong> operation—it simply counts the number of \"items\" passed to it. One, two, three... After all objects are counted, <code>Measure-Object</code> creates <strong>its own result object</strong>, which has a <code>Count</code> property equal to the total number.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><code>Count: 90</code></strong> — this is the answer to our question. 90 <code>svchost</code> processes are running. The other fields are empty because we didn't ask <code>Measure-Object</code> to perform more complex calculations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Example with <code>svchost</code> and parameters</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's change our task. Now we want not just to count <code>svchost</code> processes, but to find out <strong>how much total <span dir=\"ltr\">RAM</span> (in megabytes) they consume together</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For this, we will need parameters:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>-Property WorkingSet64</code>: This instruction tells <code>Measure-Object</code>: \"From each <code>svchost</code> object that comes to you, take the numerical value from the <code>WorkingSet64</code> property (this is memory usage in bytes).\"</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><code>-Sum</code>: This flag instruction says: \"Add up all these values you took from the <code>WorkingSet64</code> property.\"</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Our new command will look like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name 'svchost' | Measure-Object -Property WorkingSet64 -Sum\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/3.png\" alt=\"Screenshot showing PowerShell output of Measure-Object with WorkingSet64 and Sum for svchost processes\"/><figcaption>PowerShell output of Measure-Object with WorkingSet64 and Sum for svchost processes.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><code>Get-Process</code> will find the number of <code>svchost</code> objects.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>The pipeline <code>|</code> will pass them to <code>Measure-Object</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>But now <code>Measure-Object</code> works differently:\n<ul><!-- wp:list-item -->\n<li>It takes the first <code>svchost</code> object, looks at its <code>.WorkingSet64</code> property (e.g., <code>25000000</code> bytes), and remembers this number.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>It takes the second object, looks at its <code>.WorkingSet64</code> (e.g., <code>15000000</code> bytes), and adds it to the previous one.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>...and so on for all objects.</li>\n<!-- /wp:list-item --></ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Ultimately, <code>Measure-Object</code> will create a result object, but it will be different now.</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong><code>Count: 92</code></strong>: Number of objects.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Sum: 1661890560</code></strong>: This is the total sum of all <code>WorkingSet64</code> values in bytes.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Property: WorkingSet64</code></strong>: This field is now also populated, informing us which specific property was used for calculations.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2. Variables (Regular and Special <code>$_</code>)</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A variable is a named storage in memory that holds a value.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This value can be anything: text, a number, a date, or, most importantly for PowerShell, an entire object or even a collection of objects. A variable name in PowerShell always starts with a dollar sign (<span dir=\"ltr\">$</span>). Examples: <code>$name</code>, <code>$counter</code>, <code>$processList</code>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What about the special variable <code>$_</code>?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>$_</code> is shorthand for \"the current object\" or \"this thing.\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Imagine a conveyor belt in a factory. Different parts (objects) are moving along it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>$_</code> is the specific part that is currently in front of you (or in front of a processing robot).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The source (<code>Get-Process</code>) dumps a whole box of parts (all processes) onto the conveyor.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The conveyor (<code>|</code>) makes these parts move along the belt one by one.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The processor (<code>Where-Object</code> or <code>ForEach-Object</code>) is a robot that looks at each part.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The variable <code>$_</code> is that very part currently in the robot's \"hands.\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the robot finishes with one part, the conveyor feeds it the next, and <code>$_</code> will now point to that one.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's calculate how much total memory <code>svchost</code> processes use and display the result on the monitor.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Execute the command and save its complex result object to the $svchostMemory variable\n$svchostMemory = Get-Process -Name svchost | Measure-Object -Property WorkingSet64 -Sum\n\n# 2. Now we can work with the saved object. Retrieve its Sum property\n$memoryInMB = $svchostMemory.Sum / 1MB\n\n# 3. Display the result on the screen using the new variable\nWrite-Host \"All svchost processes use $memoryInMB MB of memory.\"\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/4.png\" alt=\"Screenshot showing PowerShell output of memory usage for svchost processes\"/><figcaption>PowerShell output of memory usage for svchost processes.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><code>Write-Host</code> — is a specialized cmdlet whose sole task is to <strong>display text directly to the user in the console</strong>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>String in double quotes: <code>\"...\"</code> - a text string that we pass to the <code>Write-Host</code> cmdlet as an argument. Why double quotes, not single quotes?\n<p>In PowerShell, there are two types of quotes:</p>\n<ul><!-- wp:list-item -->\n<li><strong>Single (<code>'...'</code>):</strong> Create a <strong>literal string</strong>. Everything inside them is treated as plain text, without exceptions.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>Double (<code>\"...\"</code>):</strong> Create an <strong>expandable (or substitutable) string</strong>. PowerShell \"scans\" such a string for variables (starting with <span dir=\"ltr\">$</span>) and substitutes their values in place.</li>\n<!-- /wp:list-item --></ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><code>$memoryInMB</code>. This is the variable into which we placed the calculation result in the <strong>previous step</strong> of our script. When <code>Write-Host</code> receives a string in double quotes, a process called <strong>\"String Expansion\"</strong> occurs:\n<ol><!-- wp:list-item -->\n<li>PowerShell sees the text <code>\"All svchost processes use \"</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Then it encounters the <code>$memoryInMB</code> construct. It understands that this is not just text, but a variable.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>It looks in memory, finds the value stored in <code>$memoryInMB</code> (e.g., <code>1585.52</code>).</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>It <strong>substitutes this value</strong> directly into the string.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Then it adds the remaining part of the text: <code>\" MB of memory.\"</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Ultimately, the complete, assembled string is passed to <code>Write-Host</code>: <code>\"All svchost processes use 1585.52 MB of memory.\"</code>.</li>\n<!-- /wp:list-item -->\n</ol>\n</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Launch Notepad:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Find the Notepad process and save it to the <code>$notepadProcess</code> variable</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">$notepadProcess = Get-Process -Name notepad\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\"><!-- wp:list-item -->\n<li>Access the 'Id' property of this object using dot notation and output it</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Write-Host \"ID of 'Notepad' process is: $($notepadProcess.Id)\"\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/5.png\" alt=\"Screenshot showing PowerShell output of Notepad process ID\"/><figcaption>PowerShell output of Notepad process ID.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>❗ Important:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Write-Host</code> \"breaks\" the pipeline. Text output by it cannot be passed further down the pipeline for processing. It is intended only for display.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3. Get-Member (Object Inspector)</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We know that objects \"flow\" through the pipeline. But how do we know what they consist of? What properties do they have, and what actions (methods) can be performed with them?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The cmdlet <strong><code>Get-Member</code></strong> (alias: <code>gm</code>) is the main tool for investigation. Before working with an object, pass it through <code>Get-Member</code> to see all its capabilities.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's analyze the objects created by <code>Get-Process</code>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/6.png\" alt=\"Screenshot showing PowerShell output of Get-Member for System.Diagnostics.Process objects\"/><figcaption>PowerShell output of Get-Member for System.Diagnostics.Process objects.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Let's break down each part of the <code>Get-Member</code> output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>TypeName: System.Diagnostics.Process</code> - This is the full, official \"<span dir=\"ltr\">type name</span>\" of the object from the <span dir=\"ltr\">.NET</span> library. It's its \"passport.\" This string tells you that all objects returned by <code>Get-Process</code> are of type <span dir=\"ltr\">System.Diagnostics.Process</span>. This ensures that they all will have the same set of properties and methods. You can <a href=\"https://www.google.com/search?q=System.Diagnostics.Process+site%3Amicrosoft.com\">Google</a> \"System.Diagnostics.Process\" to find the official Microsoft documentation with even more detailed information.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Column 1: <code>Name</code>\n<p>This is the simple, human-readable <strong>name</strong> of a property, method, or other \"member\" of the object. This is the name you will use in your code to access data or perform actions.</p>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Column 2: <code>MemberType</code> (Object Type)\n<p>This is the most important column for understanding. It classifies <strong>what each object is</strong>. This is its \"role,\" which tells you <strong>HOW</strong> to use it.</p>\n<ul><!-- wp:list-item -->\n<li><strong><code>Property</code> (Property):</strong> A <strong>characteristic</strong> or <strong>piece of data</strong> stored within the object. You can \"read\" its value.\n<ul><!-- wp:list-item -->\n<li><em>Examples in the screenshot:</em> <code>BasePriority</code>, <code>HandleCount</code>, <code>ExitCode</code>. These are simply data that can be viewed.</li>\n<!-- /wp:list-item --></ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Method</code> (Method):</strong> An <strong>ACTION</strong> that can be performed with the object. Methods are always called with parentheses <code>()</code>.\n<ul><!-- wp:list-item -->\n<li><em>Examples in the screenshot:</em> <code>Kill</code>, <code>Refresh</code>, <code>WaitForExit</code>. You would write <code>$process.Kill()</code> or <code>$process.Refresh()</code>.</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>AliasProperty</code> (Property Alias):</strong> A <strong>friendly alias</strong> for another, longer property. PowerShell adds them for convenience and brevity.\n<ul><!-- wp:list-item -->\n<li><em>Examples in the screenshot:</em> <code>WS</code> is a short alias for <code>WorkingSet64</code>. <code>Name</code> is for <code>ProcessName</code>. <code>VM</code> is for <code>VirtualMemorySize64</code>.</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Event</code> (Event):</strong> A <strong>NOTIFICATION</strong> that something has happened, which you can \"subscribe\" to.\n<ul><!-- wp:list-item -->\n<li><em>Example in the screenshot:</em> <code>Exited</code>. Your script can \"listen\" for this event to perform some action immediately after the process exits.</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>CodeProperty</code> and <code>NoteProperty</code>:</strong> Special types of properties, often added by PowerShell itself for convenience. <code>CodeProperty</code> calculates its value \"on the fly,\" while <code>NoteProperty</code> is a simple note-property added to the object.</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Column 3: <code>Definition</code>\n<p>This is the <strong>technical definition</strong> or \"signature\" of the member. It gives you the precise details for its use. Its content depends on the <code>MemberType</code>:</p>\n<ul><!-- wp:list-item -->\n<li><strong>For <code>AliasProperty</code>:</strong> Shows <strong>what the alias equals</strong>. This is incredibly useful!\n<ul><!-- wp:list-item -->\n<li><em>Example in the screenshot:</em> <code>WS = WorkingSet64</code>. You immediately see that <code>WS</code> is just a shorthand for <code>WorkingSet64</code>.</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>For <code>Property</code>:</strong> Shows the <strong>data type</strong> stored in the property (e.g., <code>int</code> for integer, <code>string</code> for text, <code>datetime</code> for date and time), and what can be done with it (<code>{get;}</code> — read-only, <code>{get;set;}</code> — read and modify).\n<ul><!-- wp:list-item -->\n<li><em>Example in the screenshot:</em> <code>int BasePriority {get;}</code>. This is an integer property that can only be read.</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>For <code>Method</code>:</strong> Shows what the method returns (e.g., <code>void</code> — nothing, <code>bool</code> — true/false) and what <strong>parameters</strong> (input data) it accepts in parentheses.\n<ul><!-- wp:list-item -->\n<li><em>Example in the screenshot:</em> <code>void Kill()</code>. This means the <code>Kill</code> method returns nothing and can be called without parameters. There is also a second version <code>void Kill(bool entireProcessTree)</code>, which accepts a Boolean value (true/false).</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n</ul>\n</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">In a table</h5>\n<!-- /wp:heading -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\">\n<table><thead><tr><th>Column</th><th>What is it?</th><th>Example from screenshot</th><th>Purpose?</th></tr></thead><tbody><tr><td><strong>Name</strong></td><td>The name you use in code.</td><td><code>Kill</code>, <code>WS</code>, <code>Name</code></td><td>to access a property or method (<code>$process.WS</code>, <code>$process.Kill()</code>).</td></tr><tr><td><strong>MemberType</strong></td><td>The type of member (data, action, etc.).</td><td><code>Method</code>, <code>Property</code>, <code>AliasProperty</code></td><td><strong>how</strong> to use it (read value or call with <code>()</code>).</td></tr><tr><td><strong>Definition</strong></td><td>Technical details.</td><td><code>WS = WorkingSet64</code>, <code>void Kill()</code></td><td>what is behind the alias and what parameters the method needs.</td></tr></tbody></table>\n</figure>\n<!-- /wp:table -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Example: Working with Process Windows</h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">1. Problem:</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>\"I have opened many Notepad windows. How do I programmatically minimize all but the main one, and then close only the one that has the word 'Untitled' in its title?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">2. Investigation with <code>Get-Member</code>:</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need to find properties related to the window and its title.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name notepad | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/7.png\" alt=\"Screenshot showing Get-Member output for Notepad processes, highlighting MainWindowTitle and CloseMainWindow\"/><figcaption>Get-Member output for Notepad processes, highlighting MainWindowTitle and CloseMainWindow.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Analysis of <code>Get-Member</code> result:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Scrolling through the properties, we find <code>MainWindowTitle</code>. Type <code>string</code>. Excellent, this is the main window's title!</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>In the methods, we see <code>CloseMainWindow()</code>. This is a \"softer\" way to close a window than <code>Kill()</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Also, in the methods, there is <code>WaitForInputIdle()</code>. Sounds interesting; perhaps this will help wait until the process is ready for interaction.</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><code>Get-Member</code> showed us the <code>MainWindowTitle</code> property, which is key to solving the problem and allows interacting with processes based on their window state, not just by name.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">3. Solution:</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we can build logic based on the window title.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Find all Notepad processes\n$notepads = Get-Process -Name notepad\n\n# 2. Iterate through each and check the title\nforeach ($pad in $notepads) {\n    # For each process ($pad), check its MainWindowTitle property\n    if ($pad.MainWindowTitle -like '*Untitled*') {\n        Write-Host \"Found an unsaved Notepad (ID: $($pad.Id)). Closing its window...\"\n        # $pad.CloseMainWindow() # Uncomment to actually close\n        Write-Host \"Window '$($pad.MainWindowTitle)' would have been closed.\" -ForegroundColor Yellow\n    } else {\n        Write-Host \"Skipping Notepad with title: $($pad.MainWindowTitle)\"\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/8.png\" alt=\"Screenshot showing PowerShell script output closing Notepad windows\"/><figcaption>PowerShell script output closing Notepad windows.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/9.png\" alt=\"Screenshot showing PowerShell script output closing Notepad windows (continued)\"/><figcaption>PowerShell script output closing Notepad windows (continued).</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Example: Finding a Parent Process</h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">1. Problem:</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>\"Sometimes I see many child <code>chrome.exe</code> processes in the system. How can I find out which one is the main, 'parent' process that launched all of them?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">2. Investigation with <code>Get-Member</code>:</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need to find something that links one process to another.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name chrome | Select-Object -First 1 | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/10.png\" alt=\"Screenshot showing Get-Member output for Chrome processes, highlighting the Parent CodeProperty\"/><figcaption>Get-Member output for Chrome processes, highlighting the Parent CodeProperty.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Analysis of <code>Get-Member</code> result:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Carefully reviewing the list, we find a <code>CodeProperty</code> type property named <code>Parent</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Its <code>Definition</code> is <code>System.Diagnostics.Process Parent{get=GetParentProcess;}</code>. This is a calculated property that, when accessed, returns a <strong>parent process object</strong>.</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">3. Solution:</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we can write a script that will output information about each <code>chrome</code> process and its parent.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Get all chrome processes\n$chromeProcesses = Get-Process -Name chrome\n\n# 2. For each of them, output information about it and its parent\n$chromeProcesses | Select-Object -First 5 | ForEach-Object {\n    # Get the parent process\n    $parent = $_.Parent\n    \n    # Format beautiful output\n    Write-Host \"Process:\" -ForegroundColor Green\n    Write-Host \"  - Name: $($_.ProcessName), ID: $($_.Id)\"\n    Write-Host \"Its parent:\" -ForegroundColor Yellow\n    Write-Host \"  - Name: $($parent.ProcessName), ID: $($parent.Id)\"\n    Write-Host \"-----------------------------\"\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/11.png\" alt=\"Screenshot showing PowerShell output of Chrome processes and their parents\"/><figcaption>PowerShell output of Chrome processes and their parents.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"assets/02/12.png\" alt=\"Screenshot showing PowerShell output of Chrome processes and their parents (continued)\"/><figcaption>PowerShell output of Chrome processes and their parents (continued).</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>We immediately see that processes with <span dir=\"ltr\">ID</span> 4756, 7936, 8268, and 9752 were launched by process with <span dir=\"ltr\">ID</span> 14908. We can also notice an interesting case with process <span dir=\"ltr\">ID</span>: 7252, whose parent process was not defined (possibly the parent already exited by the time of checking). Modifying the script with an <code>if ($parent)</code> check gracefully handles this case, preventing errors. <code>Get-Member</code> helped us discover the \"hidden\" <code>Parent</code> property, which provides powerful capabilities for analyzing process hierarchy.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">4. The <code>.ps1</code> File (Creating Scripts)</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When your command chain becomes useful, you'll want to save it for repeated use. This is where <strong>scripts</strong> come in — text files with the <strong><code>.ps1</code></strong> extension.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">Permission to run scripts</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, running local scripts is forbidden in Windows. To fix this <strong>for the current user</strong>, run the following once in PowerShell <strong>as an administrator</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is a safe setting that allows you to run your own scripts and scripts signed by a trusted publisher.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">Example script <code>system_monitor.ps1</code></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Create a file with this name and insert the code below. This script collects system information and generates reports.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># system_monitor.ps1\n#requires -Version 5.1\n\n&lt;#\n.SYNOPSIS\n    Script for creating a system status report.\n.DESCRIPTION\n    Collects information about processes, services, and disk space, and generates reports.\n.PARAMETER OutputPath\n    Path for saving reports. Defaults to 'C:\\Temp'.\n.EXAMPLE\n    .\\system_monitor.ps1 -OutputPath \"C:\\Reports\"\n#&gt;\nparam(\n    [Parameter(Mandatory=$false)]\n    [string]$OutputPath = \"C:\\Temp\"\n)\n\n# --- Block 1: Preparation ---\nWrite-Host \"Preparing to create report...\" -ForegroundColor Cyan\nif (!(Test-Path $OutputPath)) {\n    New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null\n}\n\n# --- Block 2: Data Collection ---\nWrite-Host \"Collecting information...\" -ForegroundColor Green\n$processes = Get-Process | Sort-Object CPU -Descending\n$services = Get-Service | Group-Object Status | Select-Object Name, Count\n\n# --- Block 3: Calling the export function (see next section) ---\nExport-Results -Processes $processes -Services $services -OutputPath $OutputPath\n\nWrite-Host \"Reports successfully saved to $OutputPath folder\" -ForegroundColor Magenta\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note: the <code>Export-Results</code> function will be defined in the next section as an example of good practice.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">5. Exporting Results</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Raw data is good, but often it needs to be presented in a format convenient for humans or other programs. PowerShell offers many cmdlets for exporting.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\">\n<table><thead><tr><th>Method</th><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><strong>Plain Text</strong></td><td><code>... | Out-File C:\\Temp\\data.txt</code></td><td>Redirects the text representation to a file.</td></tr><tr><td><strong>CSV (for Excel)</strong></td><td><code>... | Export-Csv C:\\Temp\\data.csv -NoTypeInfo</code></td><td>Exports objects to <span dir=\"ltr\">CSV</span>. <code>-NoTypeInfo</code> removes the service's first line.</td></tr><tr><td><strong>HTML Report</strong></td><td><code>... | ConvertTo-Html -Title \"Report\"</code></td><td>Creates <span dir=\"ltr\">HTML</span> code from objects.</td></tr><tr><td><strong>JSON (for API, web)</strong></td><td><code>... | ConvertTo-Json</code></td><td>Converts objects to <span dir=\"ltr\">JSON</span> format.</td></tr><tr><td><strong>XML (PowerShell native format)</strong></td><td><code>... | Export-Clixml C:\\Temp\\data.xml</code></td><td>Saves objects with all data types. They can be perfectly restored via <code>Import-Clixml</code>.</td></tr></tbody></table>\n</figure>\n<!-- /wp:table -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\">Supplement to the script: export function</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's add a function to our <code>system_monitor.ps1</code> script that will handle the export. Place this code <strong>before</strong> the <code>Export-Results</code> call.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">function Export-Results {\n    param(\n        $Processes,\n        $Services,\n        $OutputPath\n    )\n\n    $timestamp = Get-Date -Format \"yyyy-MM-dd_HH-mm\"\n\n    # Export to CSV\n    $Processes | Select-Object -First 20 | Export-Csv (Join-Path $OutputPath \"processes_$timestamp.csv\") -NoTypeInformation\n    $Services | Export-Csv (Join-Path $OutputPath \"services_$timestamp.csv\") -NoTypeInformation\n\n    # Create a beautiful HTML report\n    $htmlReportPath = Join-Path $OutputPath \"report_$timestamp.html\"\n    $processesHtml = $Processes | Select-Object -First 10 Name, Id, CPU | ConvertTo-Html -Fragment -PreContent \"&lt;h2&gt;Top 10 Processes by CPU&lt;/h2&gt;\"\n    $servicesHtml = $Services | ConvertTo-Html -Fragment -PreContent \"&lt;h2&gt;Service Statistics&lt;/h2&gt;\"\n\n    ConvertTo-Html -Head \"&lt;title&gt;System Report&lt;/title&gt;\" -Body \"&lt;h1&gt;System Report from $(Get-Date)&lt;/h1&gt; $($processesHtml) $($servicesHtml)\" | Out-File $htmlReportPath\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now our script not only collects data but also carefully saves it in two formats: <span dir=\"ltr\">CSV</span> for analysis and <span dir=\"ltr\">HTML</span> for quick viewing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Conclusion</h5>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><strong>Pipeline (<code>|</code>)</strong> — the main tool for combining commands and processing objects.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Get-Member</code></strong> — object analysis, showing what they consist of.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>Variables (<code>$var</code>, <code>$_</code>)</strong> allow you to save data and refer to the current object in the pipeline.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>.ps1</code> files</strong> turn commands into reusable automation tools.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>Export cmdlets</strong> (<code>Export-Csv</code>, <code>ConvertTo-Html</code>) export data in the appropriate format.</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>In the next part, we will apply this knowledge to navigate and manage the file system, exploring <code>System.IO.DirectoryInfo</code> and <code>System.IO.FileInfo</code> objects.</strong></p>\n<!-- /wp:paragraph -->",
    "level\":3} -->\n<h3 class=\"wp-block-heading\">1. ¿Qué es el Pipeline (<span dir=\"ltr\"><code>|</code></span>)?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>El <span dir=\"ltr\">Pipeline</span> en <span dir=\"ltr\">PowerShell</span> es un mecanismo para transferir objetos <span dir=\"ltr\">.NET</span> completos (no solo texto) de un comando a otro, donde cada cmdlet siguiente recibe objetos estructurados con todas sus propiedades y métodos.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>El símbolo <span dir=\"ltr\"><code>|</code></span> (barra vertical) es el operador del <span dir=\"ltr\">Pipeline</span>. Su tarea es tomar el resultado (salida) del comando a su izquierda y pasarlo como entrada al comando a su derecha.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\"><code>Comando 1 (crea objetos)</code></span> → <span dir=\"ltr\"><code>|</code></span> → <span dir=\"ltr\"><code>Comando 2 (recibe y procesa objetos)</code></span> → <span dir=\"ltr\"><code>|</code></span> → <span dir=\"ltr\"><code>Comando 3 (recibe objetos procesados)</code></span> → <span dir=\"ltr\">|</span> ...</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pipeline clásico de UNIX: Flujo de texto</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>En <span dir=\"ltr\"><code>bash</code></span>, el <span dir=\"ltr\">Pipeline</span> transfiere un <strong>flujo de bytes</strong>, que generalmente se interpreta como texto.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-bash\"># Encontrar todos los procesos 'nginx' y contar su cantidad\nps -ef | grep 'nginx' | wc -l\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Aquí <span dir=\"ltr\"><code>ps</code></span> emite texto, <span dir=\"ltr\"><code>grep</code></span> filtra ese texto y <span dir=\"ltr\"><code>wc</code></span> cuenta las líneas. Cada utilidad no sabe nada sobre &quot;procesos&quot;, solo trabaja con cadenas.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pipeline de PowerShell: Flujo de objetos</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Ejemplo:</strong> Obtengamos todos los procesos, ordenémoslos por uso de <span dir=\"ltr\">CPU</span> y seleccionemos los 5 que más &quot;consumen&quot;.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 5\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/1.png\" alt=\"1\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Aquí <span dir=\"ltr\"><code>Get-Process</code></span> crea <strong>objetos</strong> de proceso. <span dir=\"ltr\"><code>Sort-Object</code></span> recibe estos <strong>objetos</strong> y los ordena por la propiedad <span dir=\"ltr\"><code>CPU</code></span>. <span dir=\"ltr\"><code>Select-Object</code></span> recibe los <strong>objetos</strong> ordenados y selecciona los 5 primeros.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seguramente habrán notado en el comando palabras que empiezan con un guion (<span dir=\"ltr\">-</span>): <span dir=\"ltr\"><code>-Property</code></span>, <span dir=\"ltr\"><code>-Descending</code></span>, <span dir=\"ltr\"><code>-First</code></span>. Estos son parámetros.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Los parámetros son configuraciones, interruptores e instrucciones para un <span dir=\"ltr\">cmdlet</span>. Permiten controlar <strong>CÓMO</strong> el comando realizará su trabajo. Sin parámetros, el comando funciona en modo predeterminado, y con parámetros le dan instrucciones específicas.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Tipos principales de parámetros:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Parámetro con valor: requiere información adicional.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><span dir=\"ltr\"><code>-Property CPU</code></span>: Le decimos a <span dir=\"ltr\"><code>Sort-Object</code></span> por qué propiedad ordenar. <span dir=\"ltr\"><code>CPU</code></span> es el valor del parámetro.</li>\n<li><span dir=\"ltr\"><code>-First 5</code></span>: Le decimos a <span dir=\"ltr\"><code>Select-Object</code></span> cuántos objetos seleccionar. <span dir=\"ltr\"><code>5</code></span> es el valor del parámetro.</li>\n</ul>\n<!-- /wp:list --></li>\n<li>Parámetro de interruptor (bandera): No requiere valor. Su sola presencia en el comando activa o desactiva un comportamiento específico.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><span dir=\"ltr\"><code>-Descending</code></span>: Esta bandera le dice a <span dir=\"ltr\"><code>Sort-Object</code></span> que cambie el orden de clasificación a inverso (de mayor a menor). No necesita un valor adicional, es una instrucción por sí misma.</li>\n</ul>\n<!-- /wp:list --></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name 'svchost' | Measure-Object\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/2.png\" alt=\"1\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Este comando responde a una pregunta muy sencilla:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>&quot;¿Cuántos procesos con el nombre <span dir=\"ltr\"><code>svchost.exe</code></span> están actualmente ejecutándose en mi sistema?&quot;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Análisis paso a paso</h4>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\"><strong>Paso 1: <span dir=\"ltr\"><code>Get-Process -Name 'svchost'</code></span></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Esta parte del comando se dirige al sistema operativo y solicita que encuentre <strong>todos sin excepción</strong> los procesos en ejecución cuyo nombre de archivo ejecutable sea <span dir=\"ltr\"><code>svchost.exe</code></span>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A diferencia de los procesos tipo <span dir=\"ltr\"><code>notepad</code></span> (de los cuales normalmente hay uno o dos), los procesos <span dir=\"ltr\"><code>svchost</code></span> en el sistema siempre son <strong>muchos</strong>. El comando devolverá un <strong>array (colección) de objetos</strong>, donde cada objeto es un proceso <span dir=\"ltr\"><code>svchost</code></span> separado y completo con su <span dir=\"ltr\">ID</span> único, uso de memoria, etc.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\">PowerShell</span> encontró en el sistema, por ejemplo, 90 procesos <span dir=\"ltr\"><code>svchost</code></span> y ahora tiene en sus manos una colección de 90 objetos.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\"><strong>Paso 2: <span dir=\"ltr\"><code>|</code></span> (Operador de Pipeline)</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Este símbolo toma la colección de 90 objetos <span dir=\"ltr\"><code>svchost</code></span>, obtenida en el primer paso, y comienza a transferirlos <strong>uno por uno</strong> a la entrada del siguiente comando.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\"><strong>Paso 3: <span dir=\"ltr\"><code>Measure-Object</code></span></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dado que llamamos a <span dir=\"ltr\"><code>Measure-Object</code></span> sin parámetros (como <span dir=\"ltr\"><code>-Property</code></span>, <span dir=\"ltr\"><code>-Sum</code></span>, etc.), realiza su operación <strong>predeterminada</strong>: simplemente cuenta la cantidad de &quot;elementos&quot; que se le pasaron.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Uno, dos, tres ... Una vez contados todos los objetos, <span dir=\"ltr\"><code>Measure-Object</code></span> crea <strong>su propio objeto resultado</strong>, que tiene una propiedad <span dir=\"ltr\"><code>Count</code></span>, igual al número total.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><span dir=\"ltr\"><strong><code>Count: 90</code></strong></span> — esta es la respuesta a nuestra pregunta. Hay 90 procesos <span dir=\"ltr\"><code>svchost</code></span> en ejecución. Los demás campos están vacíos porque no le pedimos a <span dir=\"ltr\"><code>Measure-Object</code></span> que realizara cálculos más complejos.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Ejemplo con <span dir=\"ltr\"><code>svchost</code></span> y parámetros</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Cambiemos nuestra tarea. Ahora no solo queremos contar los procesos <span dir=\"ltr\"><code>svchost</code></span>, sino saber <strong>cuánta memoria <span dir=\"ltr\">RAM</span> (en megabytes) consumen en total</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para esto, necesitaremos parámetros:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><span dir=\"ltr\"><code>-Property WorkingSet64</code></span>: Esta instrucción le dice a <span dir=\"ltr\"><code>Measure-Object</code></span>: &quot;De cada objeto <span dir=\"ltr\"><code>svchost</code></span> que te llegue, toma el valor numérico de la propiedad <span dir=\"ltr\"><code>WorkingSet64</code></span> (este es el uso de memoria en bytes)&quot;.</li>\n<li><span dir=\"ltr\"><code>-Sum</code></span>: Esta instrucción-bandera dice: &quot;Suma todos estos valores que tomaste de la propiedad <span dir=\"ltr\"><code>WorkingSet64</code></span>&quot;.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Nuestro nuevo comando se verá así:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name 'svchost' | Measure-Object -Property WorkingSet64 -Sum\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/3.png\" alt=\"3\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\">\n<li><span dir=\"ltr\"><code>Get-Process</code></span> encontrará la cantidad de objetos <span dir=\"ltr\"><code>svchost</code></span>.</li>\n<li>El <span dir=\"ltr\">Pipeline</span> <span dir=\"ltr\"><code>|</code></span> los pasará a <span dir=\"ltr\"><code>Measure-Object</code></span>.</li>\n<li>Pero ahora <span dir=\"ltr\"><code>Measure-Object</code></span> funciona de una nueva manera:<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Toma el primer objeto <span dir=\"ltr\"><code>svchost</code></span>, mira su propiedad <span dir=\"ltr\"><code>.WorkingSet64</code></span> (por ejemplo, <span dir=\"ltr\"><code>25000000</code></span> bytes) y memoriza este número.</li>\n<li>Toma el segundo objeto, mira su <span dir=\"ltr\"><code>.WorkingSet64</code></span> (por ejemplo, <span dir=\"ltr\"><code>15000000</code></span> bytes) y lo suma al anterior.</li>\n<li>...y así sucesivamente para todos los objetos.</li>\n</ul>\n<!-- /wp:list --></li>\n<li>Al final, <span dir=\"ltr\"><code>Measure-Object</code></span> creará un objeto resultado, pero ahora será diferente.</li>\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><span dir=\"ltr\"><strong><code>Count: 92</code></strong></span>: Cantidad de objetos.</li>\n<li><span dir=\"ltr\"><strong><code>Sum: 1661890560</code></strong></span>: Es la suma total de todos los valores de <span dir=\"ltr\"><code>WorkingSet64</code></span> en bytes.</li>\n<li><span dir=\"ltr\"><strong><code>Property: WorkingSet64</code></strong></span>: Este campo ahora también está lleno, nos informa qué propiedad se utilizó para los cálculos.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">2. Variables (Normales y la especial <span dir=\"ltr\"><code>$_</code></span>)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Una variable es un almacén con nombre en la memoria que contiene algún valor.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Este valor puede ser cualquier cosa: texto, un número, una fecha o, lo que es más importante para <span dir=\"ltr\">PowerShell</span>, un objeto completo o incluso una colección de objetos. El nombre de una variable en <span dir=\"ltr\">PowerShell</span> siempre comienza con el signo de dólar (<span dir=\"ltr\">$</span>).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ejemplos: <span dir=\"ltr\"><code>$name</code></span>, <span dir=\"ltr\"><code>$counter</code></span>, <span dir=\"ltr\"><code>$processList</code></span>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>¿Variable especial <span dir=\"ltr\"><code>$_</code></span>?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\"><code>$_</code></span> es la abreviatura de &quot;objeto actual&quot; o &quot;esta cosa&quot;.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Imaginemos una cadena de montaje en una fábrica. Por ella circulan diferentes piezas (objetos).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\"><code>$_</code></span> es la pieza que está ahora mismo delante de ustedes (o delante del robot procesador).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Fuente (<span dir=\"ltr\"><code>Get-Process</code></span>) — vierte en la cadena de montaje una caja entera de piezas (todos los procesos).</li>\n<li>Cadena de montaje (<span dir=\"ltr\"><code>|</code></span>) — hace que estas piezas se muevan por la cinta una a una.</li>\n<li>Procesador (<span dir=\"ltr\"><code>Where-Object</code></span> o <span dir=\"ltr\"><code>ForEach-Object</code></span>) — es un robot que mira cada pieza.</li>\n<li>Variable <span dir=\"ltr\"><code>$_</code></span> — es la pieza que está ahora mismo en las &quot;manos&quot; del robot.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Cuando el robot termina con una pieza, la cadena de montaje le entrega la siguiente, y <span dir=\"ltr\"><code>$_</code></span> ahora apuntará a ella.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Contemos cuánta memoria total utilizan los procesos <span dir=\"ltr\"><code>svchost</code></span> y mostremos el resultado en el monitor.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Ejecutamos el comando y guardamos su complejo objeto resultado en la variable $svchostMemory\n$svchostMemory = Get-Process -Name svchost | Measure-Object -Property WorkingSet64 -Sum\n\n# 2. Ahora podemos trabajar con el objeto guardado. Extraemos la propiedad Sum de él\n$memoryInMB = $svchostMemory.Sum / 1MB\n\n# 3. Mostramos el resultado en pantalla, usando la nueva variable\nWrite-Host \"Todos los procesos svchost usan $memoryInMB MB de memoria.\"\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/4.png\" alt=\"3\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><span dir=\"ltr\"><code>Write-Host</code></span> — es un <span dir=\"ltr\">cmdlet</span> especializado cuya única tarea es <strong>mostrar texto directamente al usuario en la consola</strong>.</li>\n<li>Cadena entre comillas dobles: <span dir=\"ltr\"><code>&quot;...&quot;</code></span> - una cadena de texto que pasamos al <span dir=\"ltr\">cmdlet</span> <span dir=\"ltr\"><code>Write-Host</code></span> como argumento. ¿Por qué comillas dobles y no simples?<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><strong>Simples (<span dir=\"ltr\"><code>'...'</code></span>):</strong> Crean una <strong>cadena literal</strong>. Todo lo que está dentro de ellas se percibe como texto ordinario, sin excepciones.</li>\n<li><strong>Dobles (<span dir=\"ltr\"><code>&quot;...&quot;</code></span>):</strong> Crean una <strong>cadena expandible (o de sustitución)</strong>. <span dir=\"ltr\">PowerShell</span> &quot;escanea&quot; dicha cadena en busca de variables (que comienzan con <span dir=\"ltr\"><code>$</code></span>) y sustituye sus valores en su lugar.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><span dir=\"ltr\"><code>$memoryInMB</code></span>. Esta es la variable en la que <strong>en el paso anterior</strong> de nuestro script guardamos el resultado de los cálculos. Cuando <span dir=\"ltr\"><code>Write-Host</code></span> recibe una cadena entre comillas dobles, ocurre un proceso llamado <strong>&quot;expansión de cadenas&quot; (<span dir=\"ltr\">String Expansion</span>)</strong>:<!-- wp:list -->\n<ol class=\"wp-block-list\">\n<li><span dir=\"ltr\">PowerShell</span> ve el texto <span dir=\"ltr\"><code>&quot;Todos los procesos svchost usan &quot;</code></span>.</li>\n<li>Luego se encuentra con la construcción <span dir=\"ltr\"><code>$memoryInMB</code></span>. Entiende que no es solo texto, sino una variable.</li>\n<li>Busca en la memoria, encuentra el valor almacenado en <span dir=\"ltr\"><code>$memoryInMB</code></span> (por ejemplo, <span dir=\"ltr\"><code>1585.52</code></span>).</li>\n<li><strong>Sustituye este valor</strong> directamente en la cadena.</li>\n<li>Luego añade el resto del texto: <span dir=\"ltr\"><code>&quot; MB de memoria.&quot;</code></span>.</li>\n<li>Al final, a <span dir=\"ltr\"><code>Write-Host</code></span> se le pasa una cadena ya lista y ensamblada: <span dir=\"ltr\"><code>&quot;Todos los procesos svchost usan 1585.52 MB de memoria.&quot;</code></span>.</li>\n</ol>\n<!-- /wp:list --></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Abrir el bloc de notas:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {": "rdered",
    "wp": "list-item -->\n<li>Le <strong>Pipeline (<code>|</code>)</strong> — est l'outil principal pour combiner les commandes et traiter les objets.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Get-Member</code></strong> — est l'analyse des objets, qui montre de quoi ils sont composés.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Les <strong>Variables (<code>$var</code>, <code>$_</code>)</strong> permettent de sauvegarder des données et d'accéder à l'objet actuel dans le pipeline.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Les <strong>fichiers <code>.ps1</code></strong> transforment les commandes en outils d'automatisation réutilisables.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Les <strong>cmdlets d'exportation</strong> (<code>Export-Csv</code>, <code>ConvertTo-Html</code>) exportent les données dans le format approprié.</li>\n<!-- /wp:list-item -->\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Dans la prochaine partie, nous appliquerons ces connaissances pour naviguer et gérer le système de fichiers, en explorant les objets <code>System.IO.DirectoryInfo</code> et <code>System.IO.FileInfo</code>.</strong></p>\n<!-- /wp:paragraph -->\n[:]",
    "ordered": true,
    "start": 2,
    "level\":3} -->\n<h3 class=\"wp-block-heading\">3. <span dir=\"ltr\">Get-Member</span> (Inspector de objetos)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sabemos que los objetos &quot;fluyen&quot; a través del <span dir=\"ltr\">Pipeline</span>. Pero, ¿cómo saber de qué están compuestos? ¿Qué propiedades tienen y qué acciones (métodos) se pueden realizar con ellos?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>El <span dir=\"ltr\">cmdlet</span> <span dir=\"ltr\"><strong><code>Get-Member</code></strong></span> (alias: <span dir=\"ltr\"><code>gm</code></span>) es la herramienta principal para la investigación. Antes de trabajar con un objeto, pásalo por <span dir=\"ltr\"><code>Get-Member</code></span> para ver todas sus capacidades.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Analicemos los objetos que crea <span dir=\"ltr\"><code>Get-Process</code></span>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/6.png\" alt=\"6\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Desglosemos cada parte de la salida de <span dir=\"ltr\">Get-Member</span>.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\"><code>TypeName: System.Diagnostics.Process</code></span> - Este es el &quot;nombre de tipo&quot; completo y oficial del objeto de la biblioteca <span dir=\"ltr\">.NET</span>. Es su &quot;pasaporte&quot;.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Esta línea les indica que todos los objetos que devuelve <span dir=\"ltr\"><code>Get-Process</code></span> son objetos de tipo <span dir=\"ltr\"><code>System.Diagnostics.Process</code></span>. Esto garantiza que todos tendrán el mismo conjunto de propiedades y métodos. Pueden <a href=\"https://www.google.com/search?q=System.Diagnostics.Process+site%3Amicrosoft.com\">buscar en <span dir=\"ltr\">Google</span></a> &quot;<span dir=\"ltr\">System.Diagnostics.Process</span>&quot; para encontrar la documentación oficial de <span dir=\"ltr\">Microsoft</span> con información aún más detallada.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Columna 1: <span dir=\"ltr\"><code>Name</code></span></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Este es simplemente el <strong>nombre</strong> legible por humanos de la propiedad, método u otro &quot;miembro&quot; del objeto. Es este nombre el que usarán en su código para acceder a los datos o realizar acciones.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Columna 2: <span dir=\"ltr\"><code>MemberType</code></span> (Tipo de objeto)</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Esta es la columna más importante para entender. Clasifica <strong>qué es</strong> cada objeto. Es su &quot;cargo&quot;, que les dice <strong>CÓMO</strong> usarlo.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><strong><span dir=\"ltr\"><code>Property</code></span> (Propiedad):</strong> <strong>característica</strong> o <strong>porción de datos</strong>, almacenada dentro del objeto. Pueden &quot;leer&quot; su valor.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplos en la captura de pantalla:</em> <span dir=\"ltr\"><code>BasePriority</code></span>, <span dir=\"ltr\"><code>HandleCount</code></span>, <span dir=\"ltr\"><code>ExitCode</code></span>. Estos son simplemente datos que se pueden ver.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><strong><span dir=\"ltr\"><code>Method</code></span> (Método):</strong> <strong>ACCIÓN</strong> que se puede realizar con el objeto. Los métodos siempre se invocan con paréntesis <span dir=\"ltr\"><code>()</code></span>.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplos en la captura de pantalla:</em> <span dir=\"ltr\"><code>Kill</code></span>, <span dir=\"ltr\"><code>Refresh</code></span>, <span dir=\"ltr\"><code>WaitForExit</code></span>. Escribirían <span dir=\"ltr\"><code>$process.Kill()</code></span> o <span dir=\"ltr\"><code>$process.Refresh()</code></span>.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><strong><span dir=\"ltr\"><code>AliasProperty</code></span> (Alias de propiedad):</strong> <strong>alias amigable</strong> para otra propiedad más larga. <span dir=\"ltr\">PowerShell</span> los añade para mayor comodidad y brevedad.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplos en la captura de pantalla:</em> <span dir=\"ltr\"><code>WS</code></span> — es un alias corto para <span dir=\"ltr\"><code>WorkingSet64</code></span>. <span dir=\"ltr\"><code>Name</code></span> — para <span dir=\"ltr\"><code>ProcessName</code></span>. <span dir=\"ltr\"><code>VM</code></span> — para <span dir=\"ltr\"><code>VirtualMemorySize64</code></span>.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><strong><span dir=\"ltr\"><code>Event</code></span> (Evento):</strong> <strong>NOTIFICACIÓN</strong> de que algo ha ocurrido, a la que se puede &quot;suscribir&quot;.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplo en la captura de pantalla:</em> <span dir=\"ltr\"><code>Exited</code></span>. Su script puede &quot;escuchar&quot; este evento para realizar alguna acción inmediatamente después de que el proceso finalice.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><strong><span dir=\"ltr\"><code>CodeProperty</code></span> y <span dir=\"ltr\"><code>NoteProperty</code></span>:</strong> tipos especiales de propiedades, a menudo añadidas por el propio <span dir=\"ltr\">PowerShell</span> para mayor comodidad. <span dir=\"ltr\"><code>CodeProperty</code></span> calcula su valor &quot;sobre la marcha&quot;, y <span dir=\"ltr\"><code>NoteProperty</code></span> es una simple propiedad-nota añadida al objeto.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Columna 3: <span dir=\"ltr\"><code>Definition</code></span> (Definición)</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Esta es la <strong>definición técnica</strong> o &quot;firma&quot; del miembro. Les proporciona los detalles exactos para su uso. Su contenido depende de <span dir=\"ltr\"><code>MemberType</code></span>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><strong>Para <span dir=\"ltr\"><code>AliasProperty</code></span>:</strong> Muestra <strong>a qué es igual el alias</strong>. ¡Esto es increíblemente útil!<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplo en la captura de pantalla:</em> <span dir=\"ltr\"><code>WS = WorkingSet64</code></span>. Inmediatamente ven que <span dir=\"ltr\"><code>WS</code></span> es simplemente una abreviatura para <span dir=\"ltr\"><code>WorkingSet64</code></span>.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><strong>Para <span dir=\"ltr\"><code>Property</code></span>:</strong> Muestra el <strong>tipo de datos</strong> que se almacena en la propiedad (por ejemplo, <span dir=\"ltr\"><code>int</code></span> para un número entero, <span dir=\"ltr\"><code>string</code></span> para texto, <span dir=\"ltr\"><code>datetime</code></span> para fecha y hora), y lo que se puede hacer con ella (<span dir=\"ltr\"><code>{get;}</code></span> — solo leer, <span dir=\"ltr\"><code>{get;set;}</code></span> — leer y modificar).<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplo en la captura de pantalla:</em> <span dir=\"ltr\"><code>int BasePriority {get;}</code></span>. Es una propiedad de tipo entero que solo se puede leer.</li>\n</ul>\n<!-- /wp:list --></li>\n<li><strong>Para <span dir=\"ltr\"><code>Method</code></span>:</strong> Muestra lo que devuelve el método (por ejemplo, <span dir=\"ltr\"><code>void</code></span> — nada, <span dir=\"ltr\"><code>bool</code></span> — verdadero/falso) y qué <strong>parámetros</strong> (datos de entrada) acepta entre paréntesis.<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li><em>Ejemplo en la captura de pantalla:</em> <span dir=\"ltr\"><code>void Kill()</code></span>. Esto significa que el método <span dir=\"ltr\"><code>Kill</code></span> no devuelve nada y puede ser llamado sin parámetros. También hay una segunda versión <span dir=\"ltr\"><code>void Kill(bool entireProcessTree)</code></span>, que acepta un valor booleano (verdadero/falso).</li>\n</ul>\n<!-- /wp:list --></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">En forma de tabla</h4>\n<!-- /wp:heading -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\">\n<table>\n<thead>\n<tr>\n<th>Columna</th>\n<th>¿Qué es?</th>\n<th>Ejemplo de captura de pantalla</th>\n<th>¿Para qué?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><span dir=\"ltr\">Name</span></strong></td>\n<td>Nombre que usas en el código.</td>\n<td><span dir=\"ltr\"><code>Kill</code></span>, <span dir=\"ltr\"><code>WS</code></span>, <span dir=\"ltr\"><code>Name</code></span></td>\n<td>Acceder a la propiedad o método (<span dir=\"ltr\"><code>$process.WS</code></span>, <span dir=\"ltr\"><code>$process.Kill()</code></span>).</td>\n</tr>\n<tr>\n<td><strong><span dir=\"ltr\">MemberType</span></strong></td>\n<td>Tipo de miembro (datos, acción, etc.).</td>\n<td><span dir=\"ltr\"><code>Method</code></span>, <span dir=\"ltr\"><code>Property</code></span>, <span dir=\"ltr\"><code>AliasProperty</code></span></td>\n<td><strong>Cómo</strong> usarlo (leer valor o invocar con <span dir=\"ltr\"><code>()</code></span>).</td>\n</tr>\n<tr>\n<td><strong><span dir=\"ltr\">Definition</span></strong></td>\n<td>Detalles técnicos.</td>\n<td><span dir=\"ltr\"><code>WS = WorkingSet64</code></span>, <span dir=\"ltr\"><code>void Kill()</code></span></td>\n<td>Qué se esconde detrás del alias y qué parámetros necesita el método.</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<!-- /wp:table -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Ejemplo: Trabajar con ventanas de procesos</h4>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">1. Problema:</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>&quot;He abierto muchas ventanas del Bloc de Notas. ¿Cómo puedo minimizarlas todas programáticamente, excepto la principal, y luego cerrar solo aquella cuyo título contiene la palabra 'Untitled'?&quot;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">2. Investigación con <span dir=\"ltr\"><code>Get-Member</code></span>:</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Necesitamos encontrar propiedades relacionadas con la ventana y su título.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name notepad | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Análisis del resultado de <span dir=\"ltr\"><code>Get-Member</code></span>:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Al revisar las propiedades, encontramos <span dir=\"ltr\"><code>MainWindowTitle</code></span>. Tipo <span dir=\"ltr\"><code>string</code></span>. ¡Excelente, es el título de la ventana principal!</li>\n<li>En los métodos vemos <span dir=\"ltr\"><code>CloseMainWindow()</code></span>. Esta es una forma más &quot;suave&quot; de cerrar una ventana que <span dir=\"ltr\"><code>Kill()</code></span>.</li>\n<li>También en los métodos está <span dir=\"ltr\"><code>WaitForInputIdle()</code></span>. Suena interesante, quizás esto ayude a esperar a que el proceso esté listo para interactuar.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/7.png\" alt=\"7\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\"><code>Get-Member</code></span> nos mostró la propiedad <span dir=\"ltr\"><code>MainWindowTitle</code></span>, que es la clave para resolver la tarea y permite interactuar con los procesos en función del estado de sus ventanas, no solo por el nombre.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">3. Solución:</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ahora podemos construir la lógica basada en el título de la ventana.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Encontramos todos los procesos del Bloc de Notas\n$notepads = Get-Process -Name notepad\n\n# 2. Recorremos cada uno y verificamos el título\nforeach ($pad in $notepads) {\n    # Para cada proceso ($pad) verificamos su propiedad MainWindowTitle\n    if ($pad.MainWindowTitle -like '*Untitled*') {\n        Write-Host \"Se encontró un Bloc de Notas sin guardar (ID: $($pad.Id)). Cerrando su ventana...\"\n        # $pad.CloseMainWindow() # Descomentar para cerrar realmente\n        Write-Host \"La ventana '$($pad.MainWindowTitle)' se habría cerrado.\" -ForegroundColor Yellow\n    } else {\n        Write-Host \"Saltando el Bloc de Notas con el título: $($pad.MainWindowTitle)\"\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/8.png\" alt=\"8\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/9.png\" alt=\"9\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Ejemplo: Encontrar el proceso padre</h4>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">1. Problema:</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>&quot;A veces veo muchos procesos hijo <span dir=\"ltr\"><code>chrome.exe</code></span> en el sistema. ¿Cómo puedo saber cuál de ellos es el proceso 'padre' principal que los inició a todos?&quot;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">2. Investigación con <span dir=\"ltr\"><code>Get-Member</code></span>:</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Necesitamos encontrar algo que vincule un proceso con otro.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name chrome | Select-Object -First 1 | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/10.png\" alt=\"10\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Análisis del resultado de <span dir=\"ltr\"><code>Get-Member</code></span>:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<li>Revisando cuidadosamente la lista, encontramos una propiedad de tipo <span dir=\"ltr\"><code>CodeProperty</code></span> con el nombre <span dir=\"ltr\"><code>Parent</code></span>.</li>\n<li>Su definición (<span dir=\"ltr\"><code>Definition</code></span>) es <span dir=\"ltr\"><code>System.Diagnostics.Process Parent{get=GetParentProcess;}</code></span>. Esta es una propiedad calculada que, al acceder a ella, devuelve el <strong>objeto del proceso padre</strong>.</li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">3. Solución:</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ahora podemos escribir un script que para cada proceso <span dir=\"ltr\"><code>chrome</code></span> mostrará información sobre él y su padre.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Obtenemos todos los procesos de chrome\n$chromeProcesses = Get-Process -Name chrome\n\n# 2. Para cada uno de ellos, mostramos información sobre él y su padre\n$chromeProcesses | Select-Object -First 5 | ForEach-Object {\n    # Obtenemos el proceso padre\n    $parent = $_.Parent\n    \n    # Formateamos la salida\n    Write-Host \"Proceso:\" -ForegroundColor Green\n    Write-Host \"  - Nombre: $($_.ProcessName), ID: $($_.Id)\"\n    Write-Host \"Su padre:\" -ForegroundColor Yellow\n    Write-Host \"  - Nombre: $($parent.ProcessName), ID: $($parent.Id)\"\n    Write-Host \"-----------------------------\"\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/11.png\" alt=\"11\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"assets/02/12.png\" alt=\"12\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Inmediatamente vemos que los procesos con <span dir=\"ltr\">ID</span> 4756, 7936, 8268 y 9752 fueron iniciados por el proceso con <span dir=\"ltr\">ID</span> 14908. También se puede observar un caso interesante con el proceso <span dir=\"ltr\">ID</span>: 7252, cuyo proceso padre no se pudo determinar (posiblemente el padre ya había terminado en el momento de la verificación). La modificación del script con la comprobación <span dir=\"ltr\"><code>if ($parent)</code></span> maneja este caso de forma elegante, sin causar errores.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><span dir=\"ltr\"><code>Get-Member</code></span> nos ayudó a descubrir la propiedad &quot;oculta&quot; <span dir=\"ltr\"><code>Parent</code></span>, que ofrece potentes capacidades para analizar la jerarquía de procesos.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">4. Archivo <span dir=\"ltr\">*.ps1</span> (Creación de scripts)</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Cuando su cadena de comandos se vuelve útil, querrá guardarla para usarla varias veces. Para ello sirven los <strong>scripts</strong> — archivos de texto con la extensión <span dir=\"ltr\"><strong><code>.ps1</code></strong></span>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Permiso para ejecutar scripts</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Por defecto, <span dir=\"ltr\">Windows</span> prohíbe la ejecución de scripts locales. Para corregir esto <strong>para el usuario actual</strong>, ejecute una vez en <span dir=\"ltr\">PowerShell</span> <strong>como administrador</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Esta es una configuración segura que permite ejecutar sus propios scripts y los scripts firmados por un editor de confianza.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Ejemplo de script <span dir=\"ltr\"><code>system_monitor.ps1</code></span></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Cree un archivo con este nombre e inserte el código de abajo. Este script recopila información sobre el sistema y genera informes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># system_monitor.ps1\n#requires -Version 5.1\n\n&lt;#\n.SYNOPSIS\n    Script para crear un informe del estado del sistema.\n.DESCRIPTION\n    Recopila información sobre procesos, servicios y espacio en disco y genera informes.\n.PARAMETER OutputPath\n    Ruta para guardar los informes. Por defecto 'C:\\Temp'.\n.EXAMPLE\n    .\\system_monitor.ps1 -OutputPath \"C:\\Reports\"\n#&gt;\nparam(\n    [Parameter(Mandatory=$false)]\n    [string]$OutputPath = \"C:\\Temp\"\n)\n\n# --- Bloque 1: Preparación ---\nWrite-Host \"Preparando la creación del informe...\" -ForegroundColor Cyan\nif (!(Test-Path $OutputPath)) {\n    New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null\n}\n\n# --- Bloque 2: Recopilación de datos ---\nWrite-Host \"Recopilando información...\" -ForegroundColor Green\n$processes = Get-Process | Sort-Object CPU -Descending\n$services = Get-Service | Group-Object Status | Select-Object Name, Count\n\n# --- Bloque 3: Llamada a la función de exportación (ver sección siguiente) ---\nExport-Results -Processes $processes -Services $services -OutputPath $OutputPath\n\nWrite-Host \"Informes guardados exitosamente en la carpeta $OutputPath\" -ForegroundColor Magenta\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Nota: la función <span dir=\"ltr\"><code>Export-Results</code></span> se definirá en la siguiente sección como ejemplo de buena práctica.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">5. Exportación de resultados</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Los datos limpios son buenos, pero a menudo es necesario presentarlos de una manera conveniente para una persona u otro programa. <span dir=\"ltr\">PowerShell</span> ofrece muchos <span dir=\"ltr\">cmdlets</span> para la exportación.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\">\n<table>\n<thead>\n<tr>\n<th>Método</th>\n<th>Comando</th>\n<th>Descripción</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Texto simple</strong></td>\n<td><span dir=\"ltr\"><code>... | Out-File C:\\Temp\\data.txt</code></span></td>\n<td>Redirige la representación de texto a un archivo.</td>\n</tr>\n<tr>\n<td><strong><span dir=\"ltr\">CSV</span> (para <span dir=\"ltr\">Excel</span>)</strong></td>\n<td><span dir=\"ltr\"><code>... | Export-Csv C:\\Temp\\data.csv -NoTypeInfo</code></span></td>\n<td>Exporta objetos a <span dir=\"ltr\">CSV</span>. <span dir=\"ltr\"><code>-NoTypeInfo</code></span> elimina la primera línea de servicio.</td>\n</tr>\n<tr>\n<td><strong>Informe <span dir=\"ltr\">HTML</span></strong></td>\n<td><span dir=\"ltr\"><code>... | ConvertTo-Html -Title &quot;Informe&quot;</code></span></td>\n<td>Crea código <span dir=\"ltr\">HTML</span> a partir de objetos.</td>\n</tr>\n<tr>\n<td><strong><span dir=\"ltr\">JSON</span> (para <span dir=\"ltr\">API</span>, web)</strong></td>\n<td><span dir=\"ltr\"><code>... | ConvertTo-Json</code></span></td>\n<td>Convierte objetos al formato <span dir=\"ltr\">JSON</span>.</td>\n</tr>\n<tr>\n<td><strong><span dir=\"ltr\">XML</span> (formato nativo de <span dir=\"ltr\">PowerShell</span>)</strong></td>\n<td><span dir=\"ltr\"><code>... | Export-Clixml C:\\Temp\\data.xml</code></span></td>\n<td>Guarda objetos con todos los tipos de datos. Se pueden restaurar perfectamente a través de <span dir=\"ltr\"><code>Import-Clixml</code></span>.</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<!-- /wp:table -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Adición al script: función de exportación</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Agreguemos a nuestro script <span dir=\"ltr\"><code>system_monitor.ps1</code></span> una función que se encargará de la exportación. Coloque este código <strong>antes</strong> de la llamada a <span dir=\"ltr\"><code>Export-Results</code></span>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">function Export-Results {\n    param(\n        $Processes,\n        $Services,\n        $OutputPath\n    )\n\n    $timestamp = Get-Date -Format \"yyyy-MM-dd_HH-mm\"\n\n    # Exportación a CSV\n    $Processes | Select-Object -First 20 | Export-Csv (Join-Path $OutputPath \"processes_$timestamp.csv\") -NoTypeInformation\n    $Services | Export-Csv (Join-Path $OutputPath \"services_$timestamp.csv\") -NoTypeInformation\n\n    # Creación de un bonito informe HTML\n    $htmlReportPath = Join-Path $OutputPath \"report_$timestamp.html\"\n    $processesHtml = $Processes | Select-Object -First 10 Name, Id, CPU | ConvertTo-Html -Fragment -PreContent \"&lt;h2&gt;Top-10 procesos por CPU&lt;/h2&gt;\"\n    $servicesHtml = $Services | ConvertTo-Html -Fragment -PreContent \"&lt;h2&gt;Estadísticas de servicios&lt;/h2&gt;\"\n\n    ConvertTo-Html -Head \"&lt;title&gt;Informe del sistema&lt;/title&gt;\" -Body \"&lt;h1&gt;Informe del sistema de $(Get-Date)&lt;/h1&gt; $($processesHtml) $($servicesHtml)\" | Out-File $htmlReportPath\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Ahora nuestro script no solo recopila datos, sino que también los guarda cuidadosamente en dos formatos: <span dir=\"ltr\">CSV</span> para análisis y <span dir=\"ltr\">HTML</span> para una visualización rápida.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Conclusión</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {": "rdered",
    "post_status": "publish",
    "post_author": 1,
    "_seo_description": "[:en]This article is the second part of the PowerShell Philosophy series, focusing on core concepts like the pipeline, variables, Get-Member, script files (.ps1), and exporting results. Learn how to process objects efficiently, inspect their properties, automate tasks, and generate reports in various formats.[:]",
    "_seo_keywords": "[:en]PowerShell, pipeline, variables, Get-Member, .ps1, script files, export, objects, automation, Windows, System.Diagnostics.Process, Measure-Object, CSV, HTML, JSON, XML[:]",
    "level\":3} -->\n<h3 class=\"wp-block-heading\">1. Qu'est-ce que le pipeline (<code>|</code>) ?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Le pipeline dans PowerShell est un mécanisme de transmission d'objets .NET complets (et non seulement de texte) d'une commande à une autre, où chaque cmdlet suivant reçoit des objets structurés avec toutes leurs propriétés et méthodes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Le symbole <code>|</code> (barre verticale) est l'opérateur de pipeline. Sa tâche est de prendre le résultat (sortie) de la commande située à sa gauche et de le transmettre en entrée à la commande située à sa droite.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Commande 1 (crée des objets)</code> → <code>|</code> → <code>Commande 2 (reçoit et traite des objets)</code> → <code>|</code> → <code>Commande 3 (reçoit des objets traités)</code> → | ...</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Le pipeline UNIX classique : Flux de texte</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dans <code>bash</code>, le pipeline transmet un <strong>flux d'octets</strong>, qui est généralement interprété comme du texte.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-bash\"># Trouver tous les processus 'nginx' et compter leur nombre\nps -ef | grep 'nginx' | wc -l\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Ici, <code>ps</code> affiche du texte, <code>grep</code> filtre ce texte et <code>wc</code> compte les lignes. Chaque utilitaire ne sait rien des \"processus\" ; il ne travaille qu'avec des chaînes de caractères.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Le pipeline PowerShell : Flux d'objets</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Exemple :</strong> Récupérons tous les processus, trions-les par utilisation du CPU et sélectionnons les 5 les plus \"gourmands\".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 5\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/1.png\" alt=\"Exemple de pipeline PowerShell triant et sélectionnant les 5 processus les plus gourmands en CPU.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ici, <code>Get-Process</code> crée des <strong>objets</strong> processus. <code>Sort-Object</code> reçoit ces <strong>objets</strong> et les trie par la propriété <code>CPU</code>. <code>Select-Object</code> reçoit les <strong>objets</strong> triés et sélectionne les 5 premiers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vous avez sûrement remarqué dans la commande des mots commençant par un trait d'union (-) : <code>-Property</code>, <code>-Descending</code>, <code>-First</code>. Ce sont des paramètres.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Les paramètres sont des réglages, des commutateurs et des instructions pour le cmdlet. Ils permettent de contrôler la <strong>manière</strong> dont la commande exécutera son travail. Sans paramètres, la commande fonctionne en mode par défaut, et avec des paramètres, vous lui donnez des indications spécifiques.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Types de paramètres principaux :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li>Paramètre avec valeur : nécessite une information supplémentaire.\n    <ul>\n    <!-- wp:list-item -->\n    <li><code>-Property CPU</code> : Nous disons à <code>Sort-Object</code> quelle propriété utiliser pour le tri. <code>CPU</code> est la valeur du paramètre.</li>\n    <!-- /wp:list-item -->\n    <!-- wp:list-item -->\n    <li><code>-First 5</code> : Nous disons à <code>Select-Object</code> combien d'objets sélectionner. <code>5</code> est la valeur du paramètre.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Paramètre de commutation (flag) : Ne nécessite pas de valeur. Sa simple présence dans la commande active ou désactive un comportement spécifique.\n    <ul>\n    <!-- wp:list-item -->\n    <li><code>-Descending</code> : Ce flag indique à <code>Sort-Object</code> de changer l'ordre de tri en inversé (du plus grand au plus petit). Il n'a pas besoin de valeur supplémentaire — c'est une instruction en soi.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name 'svchost' | Measure-Object\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/2.png\" alt=\"Capture d'écran de la sortie de Measure-Object pour les processus svchost.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Cette commande répond à une question très simple :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"Combien de processus avec le nom <code>svchost.exe</code> sont actuellement en cours d'exécution sur mon système ?\"</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Analyse étape par étape</h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\"><strong>Étape 1 : <code>Get-Process -Name 'svchost'</code></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Cette partie de la commande s'adresse au système d'exploitation et lui demande de trouver <strong>tous sans exception</strong> les processus en cours d'exécution dont le nom de fichier exécutable est <code>svchost.exe</code>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Contrairement aux processus de type <code>notepad</code> (dont il y en a généralement un ou deux), il y a toujours <strong>beaucoup</strong> de processus <code>svchost</code> dans le système. La commande renverra un <strong>tableau (collection) d'objets</strong>, où chaque objet est un processus <code>svchost</code> distinct et complet avec son ID unique, son utilisation de la mémoire, etc.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PowerShell a trouvé dans le système, par exemple, 90 processus <code>svchost</code> et détient maintenant une collection de 90 objets.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\"><strong>Étape 2 : <code>|</code> (Opérateur de pipeline)</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ce symbole prend la collection de 90 objets <code>svchost</code> obtenue à la première étape et commence à les transmettre <strong>un par un</strong> à la commande suivante.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6 class=\"wp-block-heading\"><strong>Étape 3 : <code>Measure-Object</code></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Étant donné que nous avons appelé <code>Measure-Object</code> sans paramètres (tels que <code>-Property</code>, <code>-Sum</code>, etc.), il effectue son opération <strong>par défaut</strong> — il compte simplement le nombre \"d'éléments\" qui lui ont été transmis.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Un, deux, trois... Une fois que tous les objets sont comptés, <code>Measure-Object</code> crée <strong>son propre objet-résultat</strong>, dans lequel il y a une propriété <code>Count</code>, égale au nombre total.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><code>Count: 90</code></strong> — c'est la réponse à notre question. 90 processus <code>svchost</code> sont en cours d'exécution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Les autres champs sont vides car nous n'avons pas demandé à <code>Measure-Object</code> d'effectuer des calculs plus complexes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Exemple avec <code>svchost</code> et paramètres</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Modifions notre tâche. Maintenant, nous ne voulons pas simplement compter les processus <code>svchost</code>, mais savoir <strong>combien de mémoire vive (en mégaoctets) ils consomment ensemble</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pour cela, nous aurons besoin de paramètres :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li><code>-Property WorkingSet64</code> : Cette instruction dit à <code>Measure-Object</code> : \"De chaque objet <code>svchost</code> qui t'arrive, prends la valeur numérique de la propriété <code>WorkingSet64</code> (c'est l'utilisation de la mémoire en octets)\".</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><code>-Sum</code> : Cette instruction-flag dit : \"Additionne toutes ces valeurs que tu as prises de la propriété <code>WorkingSet64</code>\".</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Notre nouvelle commande ressemblera à ceci :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name 'svchost' | Measure-Object -Property WorkingSet64 -Sum\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/3.png\" alt=\"Capture d'écran de la sortie de Measure-Object avec les paramètres WorkingSet64 et Sum.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:list {": "rdered",
    "différemment": "n    <ul>\n    <!-- wp:list-item -->\n    <li>Il prend le premier objet <code>svchost</code>",
    "level\":3} -->\n<h3 class=\"wp-block-heading\">3. Get-Member (Inspecteur d'objets)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Nous savons que les objets \"circulent\" via le pipeline. Mais comment savoir de quoi ils sont faits ? Quelles propriétés et quelles actions (méthodes) peuvent-ils effectuer ?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Le cmdlet <strong><code>Get-Member</code></strong> (alias : <code>gm</code>) est l'outil principal pour l'exploration. Avant de travailler avec un objet, passez-le par <code>Get-Member</code> pour voir toutes ses capacités.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Analysons les objets créés par <code>Get-Process</code> :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/6.png\" alt=\"Capture d'écran de la sortie de Get-Member pour les objets Get-Process.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><em>Détaillons chaque partie de la sortie de Get-Member.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>TypeName: System.Diagnostics.Process</code> - C'est le \"nom de type\" complet et officiel de l'objet de la bibliothèque .NET. C'est son \"passeport\".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cette ligne vous indique que tous les objets renvoyés par <code>Get-Process</code> sont des objets de type <code>System.Diagnostics.Process</code>. Cela garantit qu'ils auront tous le même ensemble de propriétés et de méthodes. Vous pouvez <a href=\"https://www.google.com/search?q=System.Diagnostics.Process+site%3Amicrosoft.com\">rechercher sur Google</a> \"System.Diagnostics.Process\" pour trouver la documentation officielle de Microsoft avec encore plus d'informations détaillées.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li>Colonne 1 : <code>Name</code></li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>C'est le <strong>nom</strong> simple et lisible par l'homme d'une propriété, d'une méthode ou d'un autre \"membre\" de l'objet. C'est ce nom que vous utiliserez dans votre code pour accéder aux données ou effectuer des actions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li>Colonne 2 : <code>MemberType</code> (Type de membre)</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>C'est la colonne la plus importante à comprendre. Elle classe <strong>ce qu'est</strong> chaque membre. C'est son \"rôle\", qui vous indique <strong>COMMENT</strong> l'utiliser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li><strong><code>Property</code> (Propriété) :</strong> une <strong>caractéristique</strong> ou une <strong>portion de données</strong> stockée à l'intérieur de l'objet. Vous pouvez \"lire\" sa valeur.\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemples dans la capture d'écran :</em> <code>BasePriority</code>, <code>HandleCount</code>, <code>ExitCode</code>. Ce sont simplement des données que l'on peut consulter.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong><code>Method</code> (Méthode) :</strong> une <strong>ACTION</strong> qui peut être effectuée avec l'objet. Les méthodes sont toujours appelées avec des parenthèses <code>()</code>.\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemples dans la capture d'écran :</em> <code>Kill</code>, <code>Refresh</code>, <code>WaitForExit</code>. Vous écririez <code>$process.Kill()</code> ou <code>$process.Refresh()</code>.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- wp:list-item -->\n<li><strong><code>AliasProperty</code> (Propriété d'alias) :</strong> un <strong>alias convivial</strong> pour une autre propriété, plus longue. PowerShell les ajoute pour plus de commodité et de concision.\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemples dans la capture d'écran :</em> <code>WS</code> — est un alias court pour <code>WorkingSet64</code>. <code>Name</code> — pour <code>ProcessName</code>. <code>VM</code> — pour <code>VirtualMemorySize64</code>.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- wp:list-item -->\n<li><strong><code>Event</code> (Événement) :</strong> une <strong>NOTIFICATION</strong> qu'il s'est passé quelque chose, à laquelle on peut \"s'abonner\".\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemple dans la capture d'écran :</em> <code>Exited</code>. Votre script peut \"écouter\" cet événement pour effectuer une action immédiatement après la fin du processus.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- wp:list-item -->\n<li><strong><code>CodeProperty</code> et <code>NoteProperty</code> :</strong> des types spéciaux de propriétés, souvent ajoutées par PowerShell lui-même pour des raisons de commodité. <code>CodeProperty</code> calcule sa valeur \"à la volée\", tandis que <code>NoteProperty</code> est une simple propriété-note ajoutée à l'objet.</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li>Colonne 3 : <code>Definition</code> (Définition)</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>C'est la <strong>définition technique</strong> ou la \"signature\" du membre. Elle vous donne les détails précis pour son utilisation. Son contenu dépend de <code>MemberType</code> :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li><strong>Pour <code>AliasProperty</code> :</strong> Indique <strong>à quoi correspond l'alias</strong>. C'est incroyablement utile !\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemple dans la capture d'écran :</em> <code>WS = WorkingSet64</code>. Vous voyez immédiatement que <code>WS</code> est simplement une abréviation pour <code>WorkingSet64</code>.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>Pour <code>Property</code> :</strong> Indique le <strong>type de données</strong> stocké dans la propriété (par exemple, <code>int</code> pour un entier, <code>string</code> pour du texte, <code>datetime</code> pour une date et une heure), et ce que l'on peut en faire (<code>{get;}</code> — lecture seule, <code>{get;set;}</code> — lecture et modification).\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemple dans la capture d'écran :</em> <code>int BasePriority {get;}</code>. C'est une propriété entière que l'on peut seulement lire.</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li><strong>Pour <code>Method</code> :</strong> Indique ce que la méthode renvoie (par exemple, <code>void</code> — rien, <code>bool</code> — vrai/faux) et quels <strong>paramètres</strong> (données d'entrée) elle accepte entre parenthèses.\n    <ul>\n    <!-- wp:list-item -->\n    <li><em>Exemple dans la capture d'écran :</em> <code>void Kill()</code>. Cela signifie que la méthode <code>Kill</code> ne renvoie rien et peut être appelée sans paramètres. Il existe également une deuxième version <code>void Kill(bool entireProcessTree)</code>, qui accepte une valeur booléenne (vrai/faux).</li>\n    <!-- /wp:list-item -->\n    </ul>\n</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Sous forme de tableau</h4>\n<!-- /wp:heading -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\">\n<table>\n<thead>\n<tr>\n<th>Colonne</th>\n<th>Qu'est-ce que c'est ?</th>\n<th>Exemple de la capture d'écran</th>\n<th>Dans quel but ?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Name</strong></td>\n<td>Nom que vous utilisez dans le code.</td>\n<td><code>Kill</code>, <code>WS</code>, <code>Name</code></td>\n<td>Accéder à une propriété ou une méthode (<code>$process.WS</code>, <code>$process.Kill()</code>).</td>\n</tr>\n<tr>\n<td><strong>MemberType</strong></td>\n<td>Type de membre (données, action, etc.).</td>\n<td><code>Method</code>, <code>Property</code>, <code>AliasProperty</code></td>\n<td><strong>Comment</strong> l'utiliser (lire la valeur ou l'appeler avec <code>()</code>).</td>\n</tr>\n<tr>\n<td><strong>Definition</strong></td>\n<td>Détails techniques.</td>\n<td><code>WS = WorkingSet64</code>, <code>void Kill()</code></td>\n<td>Ce qui se cache derrière l'alias et quels paramètres la méthode nécessite.</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<!-- /wp:table -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Exemple : Travailler avec les fenêtres des processus</h4>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">1. Problème :</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>\"J'ai ouvert plusieurs fenêtres du Bloc-notes. Comment puis-je minimiser toutes, sauf la principale, puis fermer uniquement celle dont le titre contient le mot 'Untitled' ?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">2. Recherche avec <code>Get-Member</code> :</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Nous devons trouver les propriétés liées à la fenêtre et à son titre.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name notepad | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Analyse du résultat de <code>Get-Member</code> :</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li>En parcourant les propriétés, nous trouvons <code>MainWindowTitle</code>. Type <code>string</code>. Excellent, c'est le titre de la fenêtre principale !</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Dans les méthodes, nous voyons <code>CloseMainWindow()</code>. C'est une façon plus \"douce\" de fermer une fenêtre que <code>Kill()</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Il y a aussi <code>WaitForInputIdle()</code> dans les méthodes. Cela semble intéressant, cela pourrait aider à attendre que le processus soit prêt pour l'interaction.</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/7.png\" alt=\"Capture d'écran montrant les membres d'un objet processus notepad, incluant MainWindowTitle et CloseMainWindow().\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><code>Get-Member</code> nous a montré la propriété <code>MainWindowTitle</code>, qui est la clé pour résoudre la tâche et permet d'interagir avec les processus en fonction de l'état de leurs fenêtres, et non pas simplement par leur nom.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">3. Solution :</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Nous pouvons maintenant construire la logique basée sur le titre de la fenêtre.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Trouve tous les processus du Bloc-notes\n$notepads = Get-Process -Name notepad\n\n# 2. Parcourt chacun et vérifie le titre\nforeach ($pad in $notepads) {\n    # Pour chaque processus ($pad), vérifie sa propriété MainWindowTitle\n    if ($pad.MainWindowTitle -like '*Untitled*') {\n        Write-Host \"Bloc-notes non enregistré trouvé (ID : $($pad.Id)). Fermeture de sa fenêtre...\"\n        # $pad.CloseMainWindow() # Décommentez pour fermer réellement\n        Write-Host \"La fenêtre '$($pad.MainWindowTitle)' aurait été fermée.\" -ForegroundColor Yellow\n    } else {\n        Write-Host \"Ignorons le Bloc-notes avec le titre : $($pad.MainWindowTitle)\"\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/8.png\" alt=\"Capture d'écran montrant plusieurs fenêtres du Bloc-notes ouvertes.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/9.png\" alt=\"Capture d'écran de l'exécution du script de fermeture des fenêtres du Bloc-notes non enregistrées.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Exemple : Trouver le processus parent</h4>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">1. Problème :</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>\"Parfois, je vois de nombreux processus enfants <code>chrome.exe</code> dans le système. Comment puis-je savoir lequel est le processus \"parent\" principal qui les a tous lancés ?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">2. Recherche avec <code>Get-Member</code> :</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Nous devons trouver quelque chose qui relie un processus à un autre.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Get-Process -Name chrome | Select-Object -First 1 | Get-Member\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/10.png\" alt=\"Capture d'écran de la sortie de Get-Member pour un processus Chrome, mettant en évidence la propriété Parent.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Analyse du résultat de <code>Get-Member</code> :</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\">\n<!-- wp:list-item -->\n<li>En parcourant attentivement la liste, nous trouvons une propriété de type <code>CodeProperty</code> nommée <code>Parent</code>.</li>\n<!-- /wp:list-item -->\n<!-- wp:list-item -->\n<li>Sa définition (<code>Definition</code>) — <code>System.Diagnostics.Process Parent{get=GetParentProcess;}</code>. C'est une propriété calculée qui, lorsqu'elle est accédée, renvoie l'<strong>objet du processus parent</strong>.</li>\n<!-- /wp:list-item -->\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">3. Solution :</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Nous pouvons maintenant écrire un script qui affichera des informations sur le parent pour chaque processus <code>chrome</code>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># 1. Récupère tous les processus chrome\n$chromeProcesses = Get-Process -Name chrome\n\n# 2. Pour chacun d'eux, affiche des informations sur lui et son parent\n$chromeProcesses | Select-Object -First 5 | ForEach-Object {\n    # Récupère le processus parent\n    $parent = $_.Parent\n    \n    # Formate l'affichage\n    Write-Host \"Processus :\" -ForegroundColor Green\n    Write-Host \"  - Nom : $($_.ProcessName), ID : $($_.Id)\"\n    Write-Host \"Son parent :\" -ForegroundColor Yellow\n    Write-Host \"  - Nom : $($parent.ProcessName), ID : $($parent.Id)\"\n    Write-Host \"-----------------------------\"\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/11.png\" alt=\"Capture d'écran de la console affichant les processus Chrome et leurs parents.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:image -->\n<p><img src=\"assets/02/12.png\" alt=\"Capture d'écran de l'exécution du script d'identification des processus parents de Chrome.\" /></p>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Nous voyons immédiatement que les processus avec les ID 4756, 7936, 8268 et 9752 ont été lancés par le processus avec l'ID 14908. On peut également noter un cas intéressant avec le processus ID : 7252, dont le processus parent n'a pas été déterminé (il est possible que le parent ait déjà terminé au moment de la vérification). La modification du script avec une vérification <code>if ($parent)</code> gère élégamment ce cas, sans provoquer d'erreur.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Get-Member</code> nous a aidés à découvrir la propriété \"cachée\" <code>Parent</code>, qui offre de puissantes capacités pour l'analyse de la hiérarchie des processus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">4. Fichier *.ps1* (Création de scripts)</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lorsque votre chaîne de commandes devient utile, vous voudrez la sauvegarder pour une utilisation répétée. C'est à cela que servent les <strong>scripts</strong> — des fichiers texte avec l'extension <strong><code>.ps1</code></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Autorisation d'exécution des scripts</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Par défaut, l'exécution des scripts locaux est interdite sous Windows. Pour y remédier <strong>pour l'utilisateur actuel</strong>, exécutez une seule fois dans PowerShell <strong>en tant qu'administrateur</strong> :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>C'est un paramètre sûr qui permet d'exécuter vos propres scripts et les scripts signés par un éditeur de confiance.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Exemple de script <code>system_monitor.ps1</code></h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Créez un fichier portant ce nom et insérez-y le code ci-dessous. Ce script recueille des informations sur le système et génère des rapports.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\"># system_monitor.ps1\n#requires -Version 5.1\n\n&lt;#\n.SYNOPSIS\n    Script pour créer un rapport sur l'état du système.\n.DESCRIPTION\n    Collecte des informations sur les processus, les services et l'espace disque et génère des rapports.\n.PARAMETER OutputPath\n    Chemin pour l'enregistrement des rapports. Par défaut 'C:\\Temp'.\n.EXAMPLE\n    .\\system_monitor.ps1 -OutputPath \"C:\\Reports\"\n#&gt;\nparam(\n    [Parameter(Mandatory=$false)]\n    [string]$OutputPath = \"C:\\Temp\"\n)\n\n# --- Bloc 1 : Préparation ---\nWrite-Host \"Préparation de la création du rapport...\" -ForegroundColor Cyan\nif (!(Test-Path $OutputPath)) {\n    New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null\n}\n\n# --- Bloc 2 : Collecte des données ---\nWrite-Host \"Collecte des informations...\" -ForegroundColor Green\n$processes = Get-Process | Sort-Object CPU -Descending\n$services = Get-Service | Group-Object Status | Select-Object Name, Count\n\n# --- Bloc 3 : Appel de la fonction pour l'exportation (voir section suivante) ---\nExport-Results -Processes $processes -Services $services -OutputPath $OutputPath\n\nWrite-Host \"Rapports enregistrés avec succès dans le dossier $OutputPath\" -ForegroundColor Magenta\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note : la fonction <code>Export-Results</code> sera définie dans la section suivante comme un exemple de bonne pratique.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">5. Exportation des résultats</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Les données brutes, c'est bien, mais il faut souvent les présenter sous une forme conviviale pour un être humain ou un autre programme. PowerShell offre de nombreux cmdlets pour l'exportation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\">\n<table>\n<thead>\n<tr>\n<th>Méthode</th>\n<th>Commande</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Texte simple</strong></td>\n<td><code>... | Out-File C:\\Temp\\data.txt</code></td>\n<td>Redirige la représentation textuelle vers un fichier.</td>\n</tr>\n<tr>\n<td><strong>CSV (pour Excel)</strong></td>\n<td><code>... | Export-Csv C:\\Temp\\data.csv -NoTypeInfo</code></td>\n<td>Exporte les objets au format CSV. <code>-NoTypeInfo</code> supprime la première ligne de service.</td>\n</tr>\n<tr>\n<td><strong>Rapport HTML</strong></td>\n<td><code>... | ConvertTo-Html -Title &quot;Rapport&quot;</code></td>\n<td>Crée du code HTML à partir d'objets.</td>\n</tr>\n<tr>\n<td><strong>JSON (pour API, web)</strong></td>\n<td><code>... | ConvertTo-Json</code></td>\n<td>Convertit les objets au format JSON.</td>\n</tr>\n<tr>\n<td><strong>XML (format natif PowerShell)</strong></td>\n<td><code>... | Export-Clixml C:\\Temp\\data.xml</code></td>\n<td>Sauvegarde les objets avec tous les types de données. Ils peuvent être restaurés parfaitement via <code>Import-Clixml</code>.</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<!-- /wp:table -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Ajout au script : fonction d'exportation</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ajoutons à notre script <code>system_monitor.ps1</code> une fonction qui gérera l'exportation. Placez ce code <strong>avant</strong> l'appel à <code>Export-Results</code>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"line-numbers\"><code class=\"language-powershell\">function Export-Results {\n    param(\n        $Processes,\n        $Services,\n        $OutputPath\n    )\n\n    $timestamp = Get-Date -Format \"yyyy-MM-dd_HH-mm\"\n\n    # Exportation au format CSV\n    $Processes | Select-Object -First 20 | Export-Csv (Join-Path $OutputPath \"processes_$timestamp.csv\") -NoTypeInformation\n    $Services | Export-Csv (Join-Path $OutputPath \"services_$timestamp.csv\") -NoTypeInformation\n\n    # Création d'un beau rapport HTML\n    $htmlReportPath = Join-Path $OutputPath \"report_$timestamp.html\"\n    $processesHtml = $Processes | Select-Object -First 10 Name, Id, CPU | ConvertTo-Html -Fragment -PreContent \"&lt;h2&gt;Top 10 des processus par CPU&lt;/h2&gt;\"\n    $servicesHtml = $Services | ConvertTo-Html -Fragment -PreContent \"&lt;h2&gt;Statistiques des services&lt;/h2&gt;\"\n\n    ConvertTo-Html -Head \"&lt;title&gt;Rapport sur le système&lt;/title&gt;\" -Body \"&lt;h1&gt;Rapport sur le système du $(Get-Date)&lt;/h1&gt; $($processesHtml) $($servicesHtml)\" | Out-File $htmlReportPath\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Maintenant, notre script ne se contente pas de collecter des données, mais les enregistre également proprement dans deux formats : CSV pour l'analyse et HTML pour une visualisation rapide.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Conclusion</h4>\n<!-- /wp:heading -->\n\n<!-- wp:list {": "rdered"
}