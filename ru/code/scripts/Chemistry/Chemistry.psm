# =================================================================================
# Chemistry.psm1 — Модуль PowerShell для интерактивного изучения химических элементов
# PowerShell >= 7.2
# Автор: hypo69
# Дата создания: 20/08/2025 (Переработанная версия)
# =================================================================================

# =================================================================================
# ЛИЦЕНЗИЯ (MIT)
# ... (текст лицензии без изменений) ...
# =================================================================================

# --- НАЧАЛО БЛОКА: ОПРЕДЕЛЕНИЕ ФУНКЦИЙ МОДУЛЯ ---

# =================================================================================
# == ПРИВАТНАЯ ФУНКЦИЯ: Универсальный обработчик запросов к Gemini
# =================================================================================
# Эта функция не экспортируется и используется только внутри этого модуля.
function _Invoke-GeminiInternal {
    param([string]$InternalPrompt, [switch]$InternalAsJson)
    
    try { $geminiCommand = Get-Command gemini -ErrorAction Stop } catch { Write-Error "Команда 'gemini' не найдена."; return }

    $finalPrompt = $InternalPrompt
    if ($InternalAsJson) {
        $finalPrompt = "$InternalPrompt. Ответь ТОЛЬКО валидным JSON, без какого-либо дополнительного текста или markdown-разметки."
    }
    
    $rawOutput = & $geminiCommand.Source -p $finalPrompt 2>&1
    if (-not $?) { Write-Warning "Команда gemini завершилась с ошибкой."; $rawOutput | ForEach-Object { Write-Warning $_.ToString() }; return }
    $fullOutput = $rawOutput -join [Environment]::NewLine
    
    if ($InternalAsJson) {
        $jsonMatch = $fullOutput | Select-String -Pattern '(?s)({.*})|(\[.*\])'; if ($jsonMatch) { try { return $jsonMatch.Matches[0].Value | ConvertFrom-Json } catch { Write-Warning "Не удалось преобразовать ответ Gemini в JSON."; return $fullOutput } } else { Write-Warning "В ответе Gemini не найдена JSON-структура."; return $fullOutput }
    }
    
    return ($fullOutput -replace '(?s)```[a-zA-Z]*\r?\n(.*?)\r?\n```', '$1').Trim()
}


# =================================================================================
# == ПУБЛИЧНАЯ ФУНКЦИЯ: Основная команда модуля
# =================================================================================
function Start-ChemistryExplorer {
    <#
    .SYNOPSIS
        Запускает интерактивный справочник по химическим элементам на базе Gemini AI.
    .DESCRIPTION
        Эта команда запускает интерактивную сессию, в которой пользователь может
        запрашивать списки химических элементов по категориям, просматривать их
        в удобной таблице и получать дополнительную информацию по каждому элементу.
    .EXAMPLE
        PS C:\> Start-ChemistryExplorer
        # Запускает интерактивный справочник.
    .NOTES
        Требуется установленный Gemini CLI и файл Chemistry.GEMINI.md в папке модуля.
    #>
    [CmdletBinding()]
    param()

    # Загрузка промпта из файла
    $promptFilePath = Join-Path $PSScriptRoot "Chemistry.GEMINI.md"
    if (-not (Test-Path $promptFilePath)) {
        Write-Error "Файл с инструкциями не найден по пути: $promptFilePath"
        return
    }
    $systemPrompt = Get-Content -Path $promptFilePath -Raw
    
    Write-Host "Запуск интерактивного справочника химика..." -ForegroundColor Yellow
    while ($true) {
        $category = Read-Host "`nВведите категорию элементов (например, 'благородные газы') или 'выход'"
        if ($category -eq 'выход' -or [string]::IsNullOrWhiteSpace($category)) { break }
        
        # Собираем финальный промпт
        $chemPrompt = "$systemPrompt`n`nЗапрос пользователя: '$category'"
        Write-Host "`nЗапрашиваю список у Gemini..." -ForegroundColor Cyan
        
        # Используем нашу приватную функцию
        $elements = _Invoke-GeminiInternal -InternalPrompt $chemPrompt -InternalAsJson
        
        if ($elements) {
            $selectedElement = $elements | Out-ConsoleGridView -Title "Элементы категории '$category'" -OutputMode Single
            
            if ($selectedElement) {
                $factsPrompt = "Расскажи 3 самых интересных факта об элементе '$($selectedElement.name)' (символ $($selectedElement.symbol))."
                Write-Host "`nЗапрашиваю интересные факты..." -ForegroundColor Cyan
                $interestingFacts = _Invoke-GeminiInternal -InternalPrompt $factsPrompt
                Write-Host "`n--- Факты от Gemini ---`n$interestingFacts"
            }
        }
        else { Write-Warning "Не удалось получить данные от Gemini." }
    }
    Write-Host "`nСправочник закрыт." -ForegroundColor Yellow
}

# --- КОНЕЦ БЛОКА ---

# Экспортируем ТОЛЬКО основную, публичную функцию
Export-ModuleMember -Function Start-ChemistryExplorer